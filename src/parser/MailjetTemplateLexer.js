// Generated from src/grammars/MailjetTemplate.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,38,409,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,
8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,
1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,
1,20,1,20,5,20,153,8,20,10,20,12,20,156,9,20,1,20,1,20,1,20,1,20,4,20,162,
8,20,11,20,12,20,163,1,21,1,21,1,21,1,21,5,21,170,8,21,10,21,12,21,173,9,
21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,4,21,183,8,21,11,21,12,21,184,
1,22,1,22,1,22,1,22,5,22,191,8,22,10,22,12,22,194,9,22,1,22,1,22,1,22,1,
22,1,22,1,22,4,22,202,8,22,11,22,12,22,203,1,22,1,22,1,22,1,22,4,22,210,
8,22,11,22,12,22,211,1,23,1,23,1,23,1,23,5,23,218,8,23,10,23,12,23,221,9,
23,1,23,1,23,1,23,1,23,1,23,1,23,4,23,229,8,23,11,23,12,23,230,1,24,1,24,
1,24,1,24,5,24,237,8,24,10,24,12,24,240,9,24,1,24,1,24,1,24,1,24,1,24,1,
24,5,24,248,8,24,10,24,12,24,251,9,24,1,25,1,25,1,25,1,25,5,25,257,8,25,
10,25,12,25,260,9,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,269,8,25,10,
25,12,25,272,9,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,5,26,281,8,26,10,26,
12,26,284,9,26,1,26,1,26,1,26,1,26,1,26,4,26,291,8,26,11,26,12,26,292,1,
27,1,27,1,27,1,27,5,27,299,8,27,10,27,12,27,302,9,27,1,27,1,27,1,27,1,27,
1,27,1,27,1,27,1,27,5,27,312,8,27,10,27,12,27,315,9,27,1,27,1,27,1,27,1,
28,1,28,1,28,1,29,1,29,5,29,325,8,29,10,29,12,29,328,9,29,1,30,1,30,1,30,
5,30,333,8,30,10,30,12,30,336,9,30,1,30,1,30,1,30,1,30,5,30,342,8,30,10,
30,12,30,345,9,30,1,30,3,30,348,8,30,1,31,4,31,351,8,31,11,31,12,31,352,
1,31,1,31,4,31,357,8,31,11,31,12,31,358,3,31,361,8,31,1,32,4,32,364,8,32,
11,32,12,32,365,1,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,375,8,34,10,34,12,
34,378,9,34,1,34,1,34,1,34,1,35,1,35,5,35,385,8,35,10,35,12,35,388,9,35,
1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,5,36,398,8,36,10,36,12,36,401,9,
36,1,36,1,36,1,37,4,37,406,8,37,11,37,12,37,407,1,376,0,38,1,1,3,2,5,3,7,
4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,1,0,8,3,0,65,90,95,
95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,34,34,92,92,2,0,39,39,92,92,1,
0,48,57,3,0,9,10,13,13,32,32,1,0,62,62,2,0,60,60,123,123,439,0,1,1,0,0,0,
0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,
59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,82,1,0,0,0,5,84,
1,0,0,0,7,86,1,0,0,0,9,94,1,0,0,0,11,96,1,0,0,0,13,98,1,0,0,0,15,100,1,0,
0,0,17,103,1,0,0,0,19,109,1,0,0,0,21,115,1,0,0,0,23,118,1,0,0,0,25,121,1,
0,0,0,27,123,1,0,0,0,29,125,1,0,0,0,31,128,1,0,0,0,33,131,1,0,0,0,35,136,
1,0,0,0,37,142,1,0,0,0,39,145,1,0,0,0,41,148,1,0,0,0,43,165,1,0,0,0,45,186,
1,0,0,0,47,213,1,0,0,0,49,232,1,0,0,0,51,252,1,0,0,0,53,276,1,0,0,0,55,294,
1,0,0,0,57,319,1,0,0,0,59,322,1,0,0,0,61,347,1,0,0,0,63,350,1,0,0,0,65,363,
1,0,0,0,67,367,1,0,0,0,69,370,1,0,0,0,71,382,1,0,0,0,73,391,1,0,0,0,75,405,
1,0,0,0,77,78,5,118,0,0,78,79,5,97,0,0,79,80,5,114,0,0,80,81,5,58,0,0,81,
2,1,0,0,0,82,83,5,58,0,0,83,4,1,0,0,0,84,85,5,124,0,0,85,6,1,0,0,0,86,87,
5,112,0,0,87,88,5,97,0,0,88,89,5,114,0,0,89,90,5,97,0,0,90,91,5,109,0,0,
91,92,5,115,0,0,92,93,5,46,0,0,93,8,1,0,0,0,94,95,5,40,0,0,95,10,1,0,0,0,
96,97,5,44,0,0,97,12,1,0,0,0,98,99,5,41,0,0,99,14,1,0,0,0,100,101,5,105,
0,0,101,102,5,110,0,0,102,16,1,0,0,0,103,104,5,114,0,0,104,105,5,97,0,0,
105,106,5,110,0,0,106,107,5,103,0,0,107,108,5,101,0,0,108,18,1,0,0,0,109,
110,5,105,0,0,110,111,5,116,0,0,111,112,5,101,0,0,112,113,5,109,0,0,113,
114,5,46,0,0,114,20,1,0,0,0,115,116,5,61,0,0,116,117,5,61,0,0,117,22,1,0,
0,0,118,119,5,33,0,0,119,120,5,61,0,0,120,24,1,0,0,0,121,122,5,62,0,0,122,
26,1,0,0,0,123,124,5,60,0,0,124,28,1,0,0,0,125,126,5,62,0,0,126,127,5,61,
0,0,127,30,1,0,0,0,128,129,5,60,0,0,129,130,5,61,0,0,130,32,1,0,0,0,131,
132,5,116,0,0,132,133,5,114,0,0,133,134,5,117,0,0,134,135,5,101,0,0,135,
34,1,0,0,0,136,137,5,102,0,0,137,138,5,97,0,0,138,139,5,108,0,0,139,140,
5,115,0,0,140,141,5,101,0,0,141,36,1,0,0,0,142,143,5,123,0,0,143,144,5,123,
0,0,144,38,1,0,0,0,145,146,5,125,0,0,146,147,5,125,0,0,147,40,1,0,0,0,148,
149,5,123,0,0,149,150,5,37,0,0,150,154,1,0,0,0,151,153,3,65,32,0,152,151,
1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,0,
156,154,1,0,0,0,157,158,5,105,0,0,158,159,5,102,0,0,159,161,1,0,0,0,160,
162,3,65,32,0,161,160,1,0,0,0,162,163,1,0,0,0,163,161,1,0,0,0,163,164,1,
0,0,0,164,42,1,0,0,0,165,166,5,123,0,0,166,167,5,37,0,0,167,171,1,0,0,0,
168,170,3,65,32,0,169,168,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,
1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,174,175,5,101,0,0,175,176,5,108,
0,0,176,177,5,115,0,0,177,178,5,101,0,0,178,179,5,105,0,0,179,180,5,102,
0,0,180,182,1,0,0,0,181,183,3,65,32,0,182,181,1,0,0,0,183,184,1,0,0,0,184,
182,1,0,0,0,184,185,1,0,0,0,185,44,1,0,0,0,186,187,5,123,0,0,187,188,5,37,
0,0,188,192,1,0,0,0,189,191,3,65,32,0,190,189,1,0,0,0,191,194,1,0,0,0,192,
190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,192,1,0,0,0,195,196,5,101,
0,0,196,197,5,108,0,0,197,198,5,115,0,0,198,199,5,101,0,0,199,201,1,0,0,
0,200,202,3,65,32,0,201,200,1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,0,203,
204,1,0,0,0,204,205,1,0,0,0,205,206,5,105,0,0,206,207,5,102,0,0,207,209,
1,0,0,0,208,210,3,65,32,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,1,0,0,
0,211,212,1,0,0,0,212,46,1,0,0,0,213,214,5,123,0,0,214,215,5,37,0,0,215,
219,1,0,0,0,216,218,3,65,32,0,217,216,1,0,0,0,218,221,1,0,0,0,219,217,1,
0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,0,222,223,5,101,0,0,
223,224,5,108,0,0,224,225,5,105,0,0,225,226,5,102,0,0,226,228,1,0,0,0,227,
229,3,65,32,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,
0,0,0,231,48,1,0,0,0,232,233,5,123,0,0,233,234,5,37,0,0,234,238,1,0,0,0,
235,237,3,65,32,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,
1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,242,5,101,0,0,242,243,5,108,
0,0,243,244,5,115,0,0,244,245,5,101,0,0,245,249,1,0,0,0,246,248,3,65,32,
0,247,246,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,50,
1,0,0,0,251,249,1,0,0,0,252,253,5,123,0,0,253,254,5,37,0,0,254,258,1,0,0,
0,255,257,3,65,32,0,256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,
259,1,0,0,0,259,261,1,0,0,0,260,258,1,0,0,0,261,262,5,101,0,0,262,263,5,
110,0,0,263,264,5,100,0,0,264,265,5,105,0,0,265,266,5,102,0,0,266,270,1,
0,0,0,267,269,3,65,32,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,
270,271,1,0,0,0,271,273,1,0,0,0,272,270,1,0,0,0,273,274,5,37,0,0,274,275,
5,125,0,0,275,52,1,0,0,0,276,277,5,123,0,0,277,278,5,37,0,0,278,282,1,0,
0,0,279,281,3,65,32,0,280,279,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,
283,1,0,0,0,283,285,1,0,0,0,284,282,1,0,0,0,285,286,5,102,0,0,286,287,5,
111,0,0,287,288,5,114,0,0,288,290,1,0,0,0,289,291,3,65,32,0,290,289,1,0,
0,0,291,292,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,54,1,0,0,0,294,295,
5,123,0,0,295,296,5,37,0,0,296,300,1,0,0,0,297,299,3,65,32,0,298,297,1,0,
0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,
300,1,0,0,0,303,304,5,101,0,0,304,305,5,110,0,0,305,306,5,100,0,0,306,307,
5,102,0,0,307,308,5,111,0,0,308,309,5,114,0,0,309,313,1,0,0,0,310,312,3,
65,32,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,
314,316,1,0,0,0,315,313,1,0,0,0,316,317,5,37,0,0,317,318,5,125,0,0,318,56,
1,0,0,0,319,320,5,37,0,0,320,321,5,125,0,0,321,58,1,0,0,0,322,326,7,0,0,
0,323,325,7,1,0,0,324,323,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,
1,0,0,0,327,60,1,0,0,0,328,326,1,0,0,0,329,334,5,34,0,0,330,333,3,67,33,
0,331,333,8,2,0,0,332,330,1,0,0,0,332,331,1,0,0,0,333,336,1,0,0,0,334,332,
1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,334,1,0,0,0,337,348,5,34,0,0,
338,343,5,39,0,0,339,342,3,67,33,0,340,342,8,3,0,0,341,339,1,0,0,0,341,340,
1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,
345,343,1,0,0,0,346,348,5,39,0,0,347,329,1,0,0,0,347,338,1,0,0,0,348,62,
1,0,0,0,349,351,7,4,0,0,350,349,1,0,0,0,351,352,1,0,0,0,352,350,1,0,0,0,
352,353,1,0,0,0,353,360,1,0,0,0,354,356,5,46,0,0,355,357,7,4,0,0,356,355,
1,0,0,0,357,358,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,361,1,0,0,0,
360,354,1,0,0,0,360,361,1,0,0,0,361,64,1,0,0,0,362,364,7,5,0,0,363,362,1,
0,0,0,364,365,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,66,1,0,0,0,367,
368,5,92,0,0,368,369,7,2,0,0,369,68,1,0,0,0,370,371,5,123,0,0,371,372,5,
35,0,0,372,376,1,0,0,0,373,375,9,0,0,0,374,373,1,0,0,0,375,378,1,0,0,0,376,
377,1,0,0,0,376,374,1,0,0,0,377,379,1,0,0,0,378,376,1,0,0,0,379,380,5,35,
0,0,380,381,5,125,0,0,381,70,1,0,0,0,382,386,5,60,0,0,383,385,8,6,0,0,384,
383,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,389,1,0,
0,0,388,386,1,0,0,0,389,390,5,62,0,0,390,72,1,0,0,0,391,392,5,60,0,0,392,
393,5,109,0,0,393,394,5,106,0,0,394,395,5,45,0,0,395,399,1,0,0,0,396,398,
8,6,0,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,
400,402,1,0,0,0,401,399,1,0,0,0,402,403,5,62,0,0,403,74,1,0,0,0,404,406,
8,7,0,0,405,404,1,0,0,0,406,407,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,
408,76,1,0,0,0,32,0,154,163,171,184,192,203,211,219,230,238,249,258,270,
282,292,300,313,326,332,334,341,343,347,352,358,360,365,376,386,399,407,
0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class MailjetTemplateLexer extends antlr4.Lexer {

    static grammarFileName = "MailjetTemplate.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'var:'", "':'", "'|'", "'params.'", "'('", 
                         "','", "')'", "'in'", "'range'", "'item.'", "'=='", 
                         "'!='", "'>'", "'<'", "'>='", "'<='", "'true'", 
                         "'false'", "'{{'", "'}}'", null, null, null, null, 
                         null, null, null, null, "'%}'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, "VAR_START", "VAR_END", "IF_START", 
                          "ELSEIF_START", "ELSE_IF_START", "ELIF_START", 
                          "ELSE_START", "END_IF", "FOR_START", "END_FOR", 
                          "BLOCK_END", "IDENTIFIER", "STRING", "NUMBER", 
                          "WS", "ESC", "COMMENT", "HTML_TAG", "MJML_TAG", 
                          "TEXT" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "VAR_START", 
                      "VAR_END", "IF_START", "ELSEIF_START", "ELSE_IF_START", 
                      "ELIF_START", "ELSE_START", "END_IF", "FOR_START", 
                      "END_FOR", "BLOCK_END", "IDENTIFIER", "STRING", "NUMBER", 
                      "WS", "ESC", "COMMENT", "HTML_TAG", "MJML_TAG", "TEXT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

MailjetTemplateLexer.EOF = antlr4.Token.EOF;
MailjetTemplateLexer.T__0 = 1;
MailjetTemplateLexer.T__1 = 2;
MailjetTemplateLexer.T__2 = 3;
MailjetTemplateLexer.T__3 = 4;
MailjetTemplateLexer.T__4 = 5;
MailjetTemplateLexer.T__5 = 6;
MailjetTemplateLexer.T__6 = 7;
MailjetTemplateLexer.T__7 = 8;
MailjetTemplateLexer.T__8 = 9;
MailjetTemplateLexer.T__9 = 10;
MailjetTemplateLexer.T__10 = 11;
MailjetTemplateLexer.T__11 = 12;
MailjetTemplateLexer.T__12 = 13;
MailjetTemplateLexer.T__13 = 14;
MailjetTemplateLexer.T__14 = 15;
MailjetTemplateLexer.T__15 = 16;
MailjetTemplateLexer.T__16 = 17;
MailjetTemplateLexer.T__17 = 18;
MailjetTemplateLexer.VAR_START = 19;
MailjetTemplateLexer.VAR_END = 20;
MailjetTemplateLexer.IF_START = 21;
MailjetTemplateLexer.ELSEIF_START = 22;
MailjetTemplateLexer.ELSE_IF_START = 23;
MailjetTemplateLexer.ELIF_START = 24;
MailjetTemplateLexer.ELSE_START = 25;
MailjetTemplateLexer.END_IF = 26;
MailjetTemplateLexer.FOR_START = 27;
MailjetTemplateLexer.END_FOR = 28;
MailjetTemplateLexer.BLOCK_END = 29;
MailjetTemplateLexer.IDENTIFIER = 30;
MailjetTemplateLexer.STRING = 31;
MailjetTemplateLexer.NUMBER = 32;
MailjetTemplateLexer.WS = 33;
MailjetTemplateLexer.ESC = 34;
MailjetTemplateLexer.COMMENT = 35;
MailjetTemplateLexer.HTML_TAG = 36;
MailjetTemplateLexer.MJML_TAG = 37;
MailjetTemplateLexer.TEXT = 38;



